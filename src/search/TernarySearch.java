package search;

import java.util.Arrays;

import static java.lang.System.out;

/**
 * Принцип действия алгоритма:
 * 1. Поиск выполняется по отсортированной последовательности. Объявить ряд вспомогательных переменных.
 * В дальнейшем будем использовать l- индекс первого элемента последовательности, r- индекс последнего элемента
 * послдедовательности, m1- индекс вычисляемый как m1= l+(r-l)/3, m2-индекс вычисляемый как m2=r-(r-l)/3.
 * 2. Выполняем ряд проверок:
 * а) Если значение на индекса m1 равно искомому, то закончить алгоритм, вернуть m1.
 * b) Если значение на индекса m2 равно искомому, то закончить алгоритм, вернуть m2.
 * c) Если l>r закончить алгоритм вернуть отрицательный результат поиска.
 * Если ни одно из условий не выполняется то -> п3.
 * 3. Выполнить ряд проверок:
 * a) Если знаечние стоящее на индексе m1 меньше искомого, а значение стоящее на индексе m2 больше, установить l= m1+1,
 * r= m2-1;
 * b) Если значение стоящее на индексе m1 больше искомого, установить r= m1-1.
 * c) Если значение стоящее на индексе m2 больше искомого, установить l= m2+1.
 * Установить значение m1= l+(r-l)/3, m2=r-(r-l)/3, и вернуть к п2.
 */

public class TernarySearch {
    public static void main(String[] args) {
        int[] arr = new int[]{-2, 0, 3, 5, 7, 9, 11, 15, 18};
        out.println(Arrays.toString(arr));
        out.println(ternarySearch(arr, 4));

    }

    public static int ternarySearch(int[] arr, int elem) {
        int r = arr.length - 1;
        int l = 0;
        for (; l <= r; ) {
            int h = (r - l) / 3;
            int m1 = l + h;
            int m2 = r - h;
            if (arr[m1] == elem) {
                return m1;
            }
            if (arr[m2] == elem) {
                return m2;
            }
            if (arr[m1] < elem && elem < arr[m2]) {
                l = m1 + 1;
                r = m2 - 1;
            } else if (elem < arr[m1]) {
                r = m1 - 1;
            } else {
                l = m2 + 1;
            }
        }
        return -1;
    }
}
