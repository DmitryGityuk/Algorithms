import java.util.Arrays;

/**
 * Принцип работы:
 * 1. Последовательность разбивается на две части. Отсортированную и не отсортированную. В качестве отсортированной обычно
 * выбирается правая часть последовательности.
 * 2. Выполняется проход по не отсортированной части. И выполняется попарное сранвнение элементов последовательности. Если
 * первый элемент пары больше второго элемента, то происходит их обмен. В результате прохода максимальный элемент
 * не отсортированной части последовательности попадает в её конец. Он становится первым членом отсортированной части
 * последовательности.
 * 3. Алгоритм прекращает свою работу в случае отсутствия обменов при проходе не отсортированной части последовательности.
 */

public class BubbleSortKnuth {
    public static void main(String[] args) {
        int[] arr = new int[]{5, 0, -2, 18, 37, 10, 3, 8};
        sort(arr);
        System.out.println(Arrays.toString(arr));
    }

    public static void sort(int[] arr) {
        int sortedIndex = arr.length;
        int numOfSwap = 1;
        while (numOfSwap > 0) {
            numOfSwap = 0;
            for (int i = 0; i < sortedIndex - 1; i++) {
                if (arr[i] > arr[i + 1]) {
                    int temp = arr[i];
                    arr[i] = arr[i + 1];
                    arr[i + 1] = temp;
                    numOfSwap += 1;
                }
            }
            sortedIndex -= 1;
        }
    }
}
