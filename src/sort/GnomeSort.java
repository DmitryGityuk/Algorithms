package sort;

import java.util.Arrays;

/**
 * Принцип работы алгоритма:
 * 1. В качестве опорного берем первый элемент последовательности. Вводим доп-ую переменную, для хранения индекса.
 * Устанавливаем её равной индексу первого элемента.
 * 2. Выполняем сравнения опорного и следующего за ним элемента. Если опорный элемент является последним элементом последовательности
 * заканчиваем алгоритм. Если опорный элемент меньше или равен след. элементу, то в качестве опрного выбираем след-ий элемент
 * и повторяем п2.
 * 3. Если опорный элемент больше следующего, то устанавливаем значение переменной для хранения индекса равным значению индекса
 * следующего элемента. Производим обмен опорного и след-го элемента. В качестве опорного выбираем предыдущий. Повторяем до тех пор пока
 * или не дойдём до начала последовательности или опорный элемент не станет меньше следующего. После чего в качестве опорного
 * выбираем элемент индекс которого хранится во вспомогательной переменной. Повторяем п2.
 */

public class GnomeSort {
    public static void main(String[] args) {
        int[] array = new int[]{5, 0, -2, 7, 3};
        System.out.println(Arrays.toString(array));
        gnomeSort(array);
        System.out.println(Arrays.toString(array));
    }


    public static void gnomeSort(int[] array) {
        int index = 1;
        int i = 0;
        for (; i < array.length - 1; ) {
            if (array[i] <= array[i + 1]) {
                i = index;
                index += 1;
            } else {
                int tmp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = tmp;
                i = i - 1;
                if (i < 0) {
                    i = index;
                    index += 1;
                }
            }
        }
    }
}
